PrimitiveBatch
ヘッダー
#include <PrimitiveBatch.h>
#include <VertexTypes.h>
#include <Effects.h>

std::unique_ptr<PrimitiveBatch<VertexPositionColor>> primitiveBatch;
std::unique_ptr<BasicEffect> basicEffect;
ComPtr<ID3D11InputLayout> inputLayout;

イニシャライズ

primitiveBatch = std::make_unique<PrimitiveBatch<VertexPositionColor>>(m_d3dContext.Get());

basicEffect = std::make_unique<BasicEffect>(m_d3dDevice.Get());

basicEffect->SetProjection(XMMatrixOrthographicOffCenterRH(0,
    m_outputWidth, m_outputHeight, 0, 0, 1));
basicEffect->SetVertexColorEnabled(true);

void const* shaderByteCode;
size_t byteCodeLength;

basicEffect->GetVertexShaderBytecode(&shaderByteCode, &byteCodeLength);

m_d3dDevice->CreateInputLayout(VertexPositionColor::InputElements,
                          VertexPositionColor::InputElementCount,
                          shaderByteCode, byteCodeLength,
                          inputLayout.GetAddressOf() );


三角形ポリゴンなどの基本的な図形（プリミティブ）を高速に描画する為のクラス

ラインの描画
primitiveBatch->Begin();とprimitiveBatch->End();の間に書くことで描画する

ヘッダー
#include <CommonStates.h>

レンダー
CommonStates states(m_d3dDevice.Get());
	m_d3dContext->OMSetBlendState(states.Opaque(), nullptr, 0xFFFFFFFF);
	m_d3dContext->OMSetDepthStencilState(states.DepthNone(), 0);
	m_d3dContext->RSSetState(states.CullNone());

	basicEffect->Apply(m_d3dContext.Get());
	m_d3dContext->IASetInputLayout(inputLayout.Get());

	primitiveBatch->Begin();
	primitiveBatch->DrawLine
	(
		VertexPositionColor(Vector3(0, 0, 0), Color(1, 1, 1)), 
		VertexPositionColor(Vector3(800, 600, 0), Color(1, 1, 1))
	);

	primitiveBatch->End();
