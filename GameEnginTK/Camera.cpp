//==============================================================
//カメラ用クラス
//==============================================================
#include "Camera.h"


using namespace DirectX::SimpleMath;
using namespace DirectX;
//---------------------------------------------------------------
//コンストラクタ
//---------------------------------------------------------------
Camera::Camera(int outputWidth, int outputHeight)
	: m_eyepos(Vector3(0, 0, 5.0f))
	, m_refpos(Vector3(0, 0, 0.1))
	, m_upvec(Vector3(0, 1, 0))

	, m_fovY(XMConvertToRadians(60.0f))
	, m_aspect((float)outputWidth / outputHeight)
	, m_nearclip(0.1f)
	, m_farclip(1000.0f)
{
	m_view = Matrix::CreateLookAt(m_eyepos, m_refpos, m_upvec);//ビュー行列の生成
	m_proj = Matrix::CreatePerspectiveFieldOfView(m_fovY, m_aspect, m_nearclip, m_farclip);//射影行列の生成(透視投影)
}
//---------------------------------------------------------------
//デストラクタ
//---------------------------------------------------------------
Camera::~Camera()
{
}

//---------------------------------------------------------------
//アップデート
//---------------------------------------------------------------
void Camera::Update()
{
	m_view = Matrix::CreateLookAt(m_eyepos, m_refpos, m_upvec);//ビュー行列の生成
	m_proj = Matrix::CreatePerspectiveFieldOfView(m_fovY, m_aspect, m_nearclip, m_farclip);//射影行列の生成(透視投影)
}

//---------------------------------------------------------------
//ビュー行列の取得
//---------------------------------------------------------------
const Matrix& Camera::GetViewMatrix()
{
	return m_view;
}

//---------------------------------------------------------------
//プロジェクション行列の取得
//---------------------------------------------------------------
const Matrix& Camera::GetProjMatrix()
{
	return m_proj;
}

//---------------------------------------------------------------
//視点を取得
//---------------------------------------------------------------
void Camera::SetEyePos(const Vector3& eyepos)
{
	m_eyepos = eyepos;
}

//---------------------------------------------------------------
//注目点を取得
//---------------------------------------------------------------
void Camera::SetRefPos(const Vector3& refpos)
{
	m_refpos = refpos;
}

//---------------------------------------------------------------
//上方向ベクトルを取得
//---------------------------------------------------------------
void Camera::SetUpvec(const Vector3& upvec)
{
	m_upvec = upvec;
}

//---------------------------------------------------------------
//垂直方向視野角を取得
//---------------------------------------------------------------
void Camera::SetFovY(float fovY)
{
	m_fovY = fovY;
}

//---------------------------------------------------------------
//アスペクト比を取得
//---------------------------------------------------------------
void Camera::SetAspect(float aspect)
{
	m_aspect = aspect;
}

//---------------------------------------------------------------
//手前の表示限界距離を取得
//---------------------------------------------------------------
void Camera::SetNearclip(float nearclip)
{
	m_nearclip = nearclip;
}

//---------------------------------------------------------------
//奥の表示限界距離を取得
//---------------------------------------------------------------
void Camera::SetFarclip(float farclip)
{
	m_farclip = farclip;
}
